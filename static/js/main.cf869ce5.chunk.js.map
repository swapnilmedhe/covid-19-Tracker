{"version":3,"sources":["component/Summary.js","component/Countries.js","component/Details.js","App.js","serviceWorker.js","index.js"],"names":["Summary","this","props","global","date","className","NewConfirmed","NewDeaths","NewRecovered","TotalConfirmed","TotalRecovered","TotalDeaths","Component","Countries","countries","Country","Details","state","loading","axios","get","result","console","log","setState","data","Global","Date","toDateString","class","map","ctr","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sRAqDeA,G,4KA9CD,IAAD,EACcC,KAAKC,MAAlBC,EADD,EACCA,OAAOC,EADR,EACQA,KACb,OACI,yBAAKC,UAAU,aACf,yBAAKA,UAAU,QACZ,yBAAKA,UAAU,gBACX,6CACEF,EAAOG,aACZ,4BAAKF,IAGN,yBAAKC,UAAU,aACf,0CACMF,EAAOI,UACR,4BAAKH,IAGR,yBAAKC,UAAU,gBACf,6CACIF,EAAOK,aACR,4BAAKJ,IAGV,yBAAKC,UAAU,kBACf,+CACMF,EAAOM,eACR,4BAAKL,IAGV,yBAAKC,UAAU,kBACf,+CACMF,EAAOO,eACR,4BAAKN,IAGV,yBAAKC,UAAU,eACf,4CACMF,EAAOQ,YACR,4BAAKP,U,GAzCFQ,cCeRC,E,uKAbD,IACCC,EAAYb,KAAKC,MAAjBY,UACP,OACC,wBAAIT,UAAU,WACT,4BAAMS,EAAUC,SAChB,4BAAKD,EAAUL,gBACf,4BAAKK,EAAUH,aACf,4BAAKG,EAAUJ,qB,GAVJE,aCuDVI,E,kDAlDV,aAAc,IAAD,8BACT,gBACKC,MAAM,CACVH,UAAU,GACVV,KAAM,GACND,OAAO,GACPe,SAAQ,GANA,E,gMAYWC,IAAMC,IAAI,sC,OAAzBC,E,OACNC,QAAQC,IAAIF,GACZpB,KAAKuB,SAAS,CACdV,UAAWO,EAAOI,KAAKZ,UACvBV,OAAOkB,EAAOI,KAAKC,OACnBtB,KAAM,IAAIuB,KAAKN,EAAOI,KAAKE,MAAMC,eACjCV,SAAS,I,qIAIH,IAAD,OACN,OAAGjB,KAAKgB,MAAMC,QACH,yBAAKW,MAAM,YACd,yBAAKxB,UAAU,YAIlB,6BACI,kBAAC,EAAD,CAASF,OAAQF,KAAKgB,MAAMd,OAAQC,KAAMH,KAAKgB,MAAMb,OACpD,6BACA,+BACI,+BACA,4BACI,uCACA,+CACA,4CACA,iDAGJ,+BACKH,KAAKgB,MAAMH,UAAUgB,KAAK,SAAAC,GAAG,OAAI,kBAAC,EAAD,CAAWjB,UAAWiB,EAAM3B,KAAO,EAAKa,MAAMb,iB,GA5ClFQ,aCQRoB,MAVf,WACE,OACE,yBAAK3B,UAAU,OACd,wBAAIA,UAAU,SAAd,oBACA,kBAAC,EAAD,QCIe4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.cf869ce5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from  'axios';\r\nimport '../App.css';\r\n\r\n class Summary extends Component {\r\n     \r\n    \r\n    render() {\r\n        const{global,date}=this.props\r\n        return (\r\n            <div className=\"container\">\r\n            <div className=\"row \">\r\n               <div className=\"newConfirmed\">\r\n                   <h3>New Confirmed</h3>\r\n                    {global.NewConfirmed} \r\n                <h4>{date}</h4> \r\n               </div>\r\n\r\n               <div className=\"newDeaths\">\r\n               <h3>New Deaths</h3>\r\n                    {global.NewDeaths} \r\n                    <h4>{date}</h4> \r\n               </div>\r\n\r\n                 <div className=\"newRecovered\">\r\n                 <h3>New Recovered</h3>\r\n                    {global.NewRecovered} \r\n                    <h4>{date}</h4> \r\n               </div>\r\n\r\n               <div className=\"totalConfirmed\">\r\n               <h3>Total Confirmed</h3>\r\n                    {global.TotalConfirmed}\r\n                    <h4>{date}</h4> \r\n               </div>\r\n\r\n               <div className=\"totalRecovered\">\r\n               <h3>Total Recovered</h3>\r\n                    {global.TotalRecovered}\r\n                    <h4>{date}</h4> \r\n               </div>\r\n               \r\n               <div className=\"totalDeaths\">\r\n               <h3>Total Deaths</h3>\r\n                    {global.TotalDeaths}\r\n                    <h4>{date}</h4> \r\n               </div>\r\n               \r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Summary;\r\n","import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\n class Countries extends Component {\r\n     \r\n\r\n    render() {\r\n         const{countries} =this.props;\r\n        return (\r\n         <tr className=\"con-row\">\r\n              <td >{countries.Country}</td>\r\n              <td>{countries.TotalConfirmed}</td>\r\n              <td>{countries.TotalDeaths}</td>\r\n              <td>{countries.TotalRecovered}</td>\r\n          \r\n         </tr>\r\n        )\r\n    }\r\n}\r\nexport default Countries;\r\n","import React, { Component } from 'react';\r\nimport axios from  'axios';\r\nimport Summary from './Summary';\r\nimport Countries from './Countries';\r\nimport '../App.css';\r\n\r\n class Details extends Component {\r\n     \r\n     constructor(){\r\n         super();\r\n         this.state={\r\n          countries:[],\r\n          date: '',\r\n          global:[],\r\n          loading:true\r\n         }\r\n     }\r\n\r\n      \r\n    async componentDidMount(){\r\n        const result = await axios.get(\"https://api.covid19api.com/summary\");\r\n        console.log(result);\r\n        this.setState({\r\n        countries: result.data.Countries,\r\n        global:result.data.Global,\r\n        date: new Date(result.data.Date).toDateString(),\r\n        loading: false\r\n        });\r\n    }\r\n  \r\n    render() {\r\n       if(this.state.loading){\r\n           return <div class=\"continer\">\r\n               <div className=\"loader\"></div>\r\n           </div>\r\n       }\r\n        return (\r\n            <div>\r\n                <Summary global={this.state.global} date={this.state.date} />\r\n                 <hr/>\r\n                 <table>\r\n                     <thead>\r\n                     <tr>\r\n                         <th>Country</th>\r\n                         <th>Total Confirmed</th>\r\n                         <th>Total Deaths</th>\r\n                         <th>Total Recovered</th>\r\n                     </tr>\r\n                     </thead>\r\n                     <tbody>\r\n                         {this.state.countries.map( ctr => <Countries countries={ctr } date ={this.state.date}/> )}\r\n                         {/* <Countries countries={this.state.countries } date ={this.state.date}/> */}\r\n                     </tbody>\r\n                 </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Details;\r\n","import React from 'react';\nimport Details from './component/Details';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <h2 className=\"title\">Covid-19 Tracker</h2>\n     <Details/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}